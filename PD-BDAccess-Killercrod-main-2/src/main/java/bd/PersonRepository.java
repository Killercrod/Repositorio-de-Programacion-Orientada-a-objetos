package bd;

import model.Person;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PersonRepository {

    public PersonRepository() {
        initSchema();
    }

  private void initSchema() {
    final String sql = "CREATE TABLE IF NOT EXISTS person (" +
            "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "name VARCHAR(100) NOT NULL, " +
            "age INT NOT NULL)";
    try (Connection conn = Database.getConnection();
         Statement st = conn.createStatement()) {
        st.execute(sql);
    } catch (SQLException e) {
        throw new RuntimeException("Failed to init schema", e);
    }
}

    public Person insert(Person p) {
        final String sql = "INSERT INTO person(name, age) VALUES(?, ?)";
        try (Connection conn = Database.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, p.getName());
            ps.setInt(2, p.getAge());
            ps.executeUpdate();
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    long id = rs.getLong(1);
                    return new Person(id, p.getName(), p.getAge());
                }
            }
            return p;
        } catch (SQLException e) {
            throw new RuntimeException("Insert failed", e);
        }
    }

    public List<Person> findAll() {
        final String sql = "SELECT id, name, age FROM person ORDER BY id";
        List<Person> list = new ArrayList<>();
        try (Connection conn = Database.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                list.add(new Person(rs.getLong("id"), rs.getString("name"), rs.getInt("age")));
            }
        } catch (SQLException e) {
            throw new RuntimeException("Query failed", e);
        }
        return list;
    }

    public void initBDPerson() {
        final String countSql = "SELECT COUNT(1) FROM person";
        try (Connection conn = Database.getConnection();
             PreparedStatement countPs = conn.prepareStatement(countSql);
             ResultSet rs = countPs.executeQuery()) {
            long count = 0;
            if (rs.next()) {
                count = rs.getLong(1);
            }
            if (count > 0) {
                return; // already seeded
            }
        } catch (SQLException e) {
            throw new RuntimeException("Failed to check person count", e);
        }

        final String[] names = {"Alice","Bob","Carol","Dave","Eve","Frank","Grace","Heidi","Ivan","Judy"};
        final String insertSql = "INSERT INTO person(name, age) VALUES(?, ?)";
        try (Connection conn = Database.getConnection();
             PreparedStatement ps = conn.prepareStatement(insertSql)) {
            int baseAge = 20;
            for (int i = 0; i < names.length; i++) {
                ps.setString(1, names[i]);
                ps.setInt(2, baseAge + i);
                ps.addBatch();
            }
            ps.executeBatch();
        } catch (SQLException e) {
            throw new RuntimeException("Failed to seed initial persons", e);
        }
    }
}
